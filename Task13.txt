Для удаления максимума и минимума за О(1) достаточно реализовать отсортированную структуру данных - показано на примере двусвязного списка.

Далее допустим, что, по условию задачи, требуются вставка и удаление произвольного элемента. Эти операции можно выполнять за амортизированное О(1), если использовать словарь.
Но при этом невозможно обеспечить выполнение всех четырёх операций за константное время, так как словарь - это неупорядоченная структура данных.
Использование дополнительной памяти также не поможет, так как мы имеем проблему определения "предыдущего" максимума/минимума.
Для её решения нам необходима упорядоченная структура, что делает невозможным удаление максимума/минимума за константное время.

Оптимизация будет зависеть от более конкретных условий - какая операция наименее приоритетна по производительности.
Другой пример - если достаточно вставки/удаления в конец, а не в середину, то можно реализовать структуру данных на нескольких стеках, в которой дополнительный стек будет использоваться для хранения информации о максимальном/минимальном элементе. Это даст нам константную производительность для всех четырех операций.
